{"cells":[{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":17487,"status":"ok","timestamp":1640456686204,"user":{"displayName":"Alex Chatbot","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16417906010517197924"},"user_tz":-330},"id":"TJem_sS9FqbP","outputId":"38320a27-66cb-4d49-bbf2-295d4e91c822"},"outputs":[{"name":"stdout","output_type":"stream","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":399},"executionInfo":{"elapsed":5431,"status":"ok","timestamp":1640456691626,"user":{"displayName":"Alex Chatbot","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16417906010517197924"},"user_tz":-330},"id":"KLtRqLAGEkLg","outputId":"111a2e2b-9651-4271-9991-fc14e8435c0f"},"outputs":[{"name":"stdout","output_type":"stream","text":["Collecting anvil-uplink\n","  Downloading anvil_uplink-0.3.41-py2.py3-none-any.whl (64 kB)\n","\u001b[?25l\r\u001b[K     |█████                           | 10 kB 19.1 MB/s eta 0:00:01\r\u001b[K     |██████████▏                     | 20 kB 11.4 MB/s eta 0:00:01\r\u001b[K     |███████████████▎                | 30 kB 9.6 MB/s eta 0:00:01\r\u001b[K     |████████████████████▎           | 40 kB 8.6 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▍      | 51 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▌ | 61 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 64 kB 2.1 MB/s \n","\u001b[?25hRequirement already satisfied: future in /usr/local/lib/python3.7/dist-packages (from anvil-uplink) (0.16.0)\n","Collecting ws4py\n","  Downloading ws4py-0.5.1.tar.gz (51 kB)\n","\u001b[?25l\r\u001b[K     |██████▍                         | 10 kB 27.7 MB/s eta 0:00:01\r\u001b[K     |████████████▊                   | 20 kB 32.3 MB/s eta 0:00:01\r\u001b[K     |███████████████████▏            | 30 kB 36.7 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▌      | 40 kB 39.6 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▉| 51 kB 42.0 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 51 kB 184 kB/s \n","\u001b[?25hRequirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from anvil-uplink) (1.15.0)\n","Collecting argparse\n","  Downloading argparse-1.4.0-py2.py3-none-any.whl (23 kB)\n","Building wheels for collected packages: ws4py\n","  Building wheel for ws4py (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for ws4py: filename=ws4py-0.5.1-py3-none-any.whl size=45230 sha256=e7fb8ff4d7f830a0e81656e80316c06c682acd770e2d258b182c6d0452a36f5d\n","  Stored in directory: /root/.cache/pip/wheels/29/ea/7d/3410aa0aa0e4402ead9a7a97ab2214804887e0f5c2b76f0c96\n","Successfully built ws4py\n","Installing collected packages: ws4py, argparse, anvil-uplink\n","Successfully installed anvil-uplink-0.3.41 argparse-1.4.0 ws4py-0.5.1\n"]},{"data":{"application/vnd.colab-display-data+json":{"pip_warning":{"packages":["argparse","google"]}}},"metadata":{},"output_type":"display_data"}],"source":["!pip install anvil-uplink"]},{"cell_type":"code","execution_count":4,"metadata":{"executionInfo":{"elapsed":21,"status":"ok","timestamp":1640456691627,"user":{"displayName":"Alex Chatbot","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16417906010517197924"},"user_tz":-330},"id":"ZYrQJlYs2dQV"},"outputs":[],"source":["#pip install tk"]},{"cell_type":"code","execution_count":5,"metadata":{"executionInfo":{"elapsed":21,"status":"ok","timestamp":1640456691629,"user":{"displayName":"Alex Chatbot","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16417906010517197924"},"user_tz":-330},"id":"nuAMZWd45T5G"},"outputs":[],"source":["#import tkinter as tk\n","#from tkinter import *"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":676,"status":"ok","timestamp":1640456692285,"user":{"displayName":"Alex Chatbot","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16417906010517197924"},"user_tz":-330},"id":"ba5bes9x5g0p","outputId":"621f648e-840d-40db-b62e-5b25df9b1f61"},"outputs":[{"name":"stdout","output_type":"stream","text":["Connecting to wss://anvil.works/uplink\n","Anvil websocket open\n","Connected to \"Default environment\" as SERVER\n"]}],"source":["import anvil.server\n","\n","anvil.server.connect(\"UISBPRXO45JXOW37TAV7S3BI-QTHQNQQN57DALOUQ\")"]},{"cell_type":"code","execution_count":7,"metadata":{"executionInfo":{"elapsed":3660,"status":"ok","timestamp":1640456695940,"user":{"displayName":"Alex Chatbot","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16417906010517197924"},"user_tz":-330},"id":"O6kGcc4Qz58h"},"outputs":[],"source":["# pip install tensorflow keras pickle nltk\n","from google.colab import drive\n","import numpy as np\n","from keras.models import Sequential\n","from keras.layers import Dense, Activation, Dropout\n","# from keras.optimizers import SGD\n","from tensorflow.keras.optimizers import SGD\n","import random\n","import nltk\n","from nltk.stem import WordNetLemmatizer\n","lemmatizer = WordNetLemmatizer()\n","import json\n","import pickle\n","intents_file = open('/content/drive/MyDrive/Colab Notebooks/intents.json').read()\n","intents = json.loads(intents_file)"]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":764,"status":"ok","timestamp":1640456696697,"user":{"displayName":"Alex Chatbot","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16417906010517197924"},"user_tz":-330},"id":"MOlYh5OC1FE-","outputId":"e1e4f097-f6c6-4286-fae1-abf3a7fb24cc"},"outputs":[{"name":"stdout","output_type":"stream","text":["[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Unzipping tokenizers/punkt.zip.\n","[(['hi'], 'greeting'), (['hello'], 'greeting'), (['what', \"'s\", 'up'], 'greeting'), (['sup'], 'greeting'), (['is', 'anyone', 'there'], 'greeting'), (['whats', 'good'], 'greeting'), (['hey'], 'greeting'), (['bye'], 'goodbye'), (['cya'], 'goodbye'), (['see', 'you', 'later'], 'goodbye'), (['goodbye'], 'goodbye'), (['im', 'leaving'], 'goodbye'), (['have', 'a', 'good', 'day'], 'goodbye'), (['Who', 'is', 'your', 'creator'], 'creation'), (['Who', 'made', 'you'], 'creation'), (['who', 'built', 'you'], 'creation'), (['how', 'old', 'are', 'you', '?'], 'age'), (['what', 'is', 'your', 'age', '?'], 'age'), (['whats', 'your', 'age', '?'], 'age'), (['thanks'], 'thanks'), (['thank', 'you'], 'thanks'), (['thankyou'], 'thanks'), (['ty'], 'thanks'), (['I', 'owe', 'you', 'one'], 'thanks'), (['whats', 'is', 'your', 'name'], 'name'), (['whats', 'your', 'name'], 'name'), (['whats', 'should', 'I', 'call', 'you'], 'name'), (['how', 'should', 'I', 'address', 'you'], 'name'), (['Yes', 'it', 'does'], 'yes'), (['Yeah'], 'yes'), (['Haha', 'yep'], 'yes'), (['yes'], 'yes'), (['Indeed'], 'yes'), (['Yup'], 'yes'), (['yep'], 'yes'), (['Oh', 'really'], 'yes'), (['Okay'], 'yes'), (['Okie'], 'yes'), (['Ok'], 'yes'), (['I', 'see'], 'yes'), (['why'], 'why'), (['what'], 'why'), (['whats', 'that'], 'why'), (['no'], 'no'), (['nah'], 'no'), (['not', 'really'], 'no'), (['thats', 'scary'], 'no'), (['singularity'], 'no'), (['what', 'are', 'you', 'doing', 'now', '?'], 'how_are_you'), (['What', 'are', 'you', 'doing', '?'], 'how_are_you'), (['what', 'you', 'doin'], 'how_are_you'), (['how', 'are', 'you'], 'how_are_you'), (['how', 'are', 'you', 'doing'], 'how_are_you'), (['what', 'is', 'going', 'on'], 'how_are_you'), (['what', 'are', 'you', 'doing'], 'how_are_you'), (['fuck'], 'abusive'), (['fuck', 'you'], 'abusive'), (['fuck', 'off'], 'abusive'), (['fuck', 'yourself'], 'abusive'), (['I', 'am', 'doing', 'great'], 'doing_great'), (['I', 'am', 'well'], 'doing_great'), (['Im', 'great'], 'doing_great'), (['awesome'], 'doing_great'), (['happy'], 'doing_great'), (['better'], 'doing_great'), (['not', 'great'], 'doing_badly'), (['not', 'well'], 'doing_badly'), (['not', 'good'], 'doing_badly'), (['bad'], 'doing_badly'), (['badly'], 'doing_badly'), (['terrible'], 'doing_badly'), (['horrible'], 'doing_badly'), (['awful'], 'doing_badly'), (['sad'], 'doing_badly'), (['break'], 'doing_badly'), (['depressed'], 'doing_badly'), (['depression'], 'doing_badly'), (['wait', 'you', 'watch', 'Netflix'], 'netflix'), (['how', 'do', 'you', 'watch', 'Netflix'], 'netflix'), (['Netflix'], 'netflix'), (['I', 'love', 'to', 'watch', 'netflix'], 'netflix'), (['I', 'love', 'netflix', 'and', 'chill'], 'netflix'), (['how', 'can', 'you', 'run'], 'quick_run'), (['how', 'do', 'you', 'run'], 'quick_run'), (['how', 'run'], 'quick_run'), (['why', 'run'], 'quick_run'), (['run'], 'quick_run'), (['are', 'you', 'real'], 'real_bot'), (['are', 'you', 'human'], 'real_bot'), (['are', 'you', 'a', 'robot'], 'real_bot'), (['are', 'you', 'alive'], 'real_bot'), (['are', 'you', 'sentient'], 'real_bot'), (['are', 'you', 'conscious'], 'real_bot'), (['tell', 'me', 'joke'], 'joke'), (['got', 'any', 'good', 'jokes'], 'joke'), (['got', 'jokes'], 'joke'), (['can', 'you', 'tell', 'joke'], 'joke'), (['tell', 'joke'], 'joke'), (['how', 'about', 'another', 'one'], 'joke'), (['joke'], 'joke'), (['haha'], 'good_joke'), (['that', 'was', 'funny'], 'good_joke'), (['very', 'funny'], 'good_joke'), (['good', 'one'], 'good_joke'), (['real', 'funny'], 'good_joke'), (['bad', 'joke'], 'bad_joke'), (['trash', 'joke'], 'bad_joke'), (['terrible'], 'bad_joke'), (['not', 'funny'], 'bad_joke'), (['whats', 'wrong'], 'hate'), (['I', 'hate', 'you'], 'hate'), (['you', 'stupid'], 'hate'), (['you', 'dumb'], 'hate'), (['you', 'mean'], 'hate'), (['you', 'my', 'friend'], 'like'), (['I', 'like', 'you'], 'like'), (['you', 'cool'], 'like'), (['you', 'are', 'chill'], 'like'), (['I', 'love', 'you'], 'love'), (['I', 'think', 'I', 'love', 'you'], 'love'), (['whats', 'your', 'favorite', 'show'], 'favorite_show'), (['favorite', 'tv', 'show'], 'favorite_show'), (['favorite', 'show'], 'favorite_show'), (['Whats', 'your', 'favorite', 'movie'], 'favorite_movie'), (['whats', 'your', 'favorite', 'film'], 'favorite_movie'), (['best', 'movie'], 'favorite_movie'), (['your', 'favorite', 'movie'], 'favorite_movie'), (['whats', 'favorite', 'movie'], 'favorite_movie'), (['whats', 'your', 'favorite', 'food'], 'favorite_food'), (['favorite', 'food'], 'favorite_food'), (['What', 'do', 'you', 'think', 'about'], 'your_thoughts'), (['What', 'your', 'thoughts'], 'your_thoughts')]\n"]}],"source":["import nltk\n","nltk.download('punkt')\n","words=[]\n","classes = []\n","documents = []\n","ignore_letters = ['!', '?', ',', '.']\n","for intent in intents['intents']:\n","    for pattern in intent['patterns']:\n","        #tokenize each word\n","        word = nltk.word_tokenize(pattern)\n","        words.extend(word)\n","        #add documents in the corpus\n","        documents.append((word, intent['tag']))\n","        # add to our classes list\n","        if intent['tag'] not in classes:\n","            classes.append(intent['tag'])\n","print(documents)\n"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3019,"status":"ok","timestamp":1640456699712,"user":{"displayName":"Alex Chatbot","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16417906010517197924"},"user_tz":-330},"id":"fQmkYrce2APb","outputId":"6db8ef0e-7147-480d-ebaf-e6192ded352c"},"outputs":[{"name":"stdout","output_type":"stream","text":["[nltk_data] Downloading package wordnet to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/wordnet.zip.\n","Training data is created\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:25: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n"]}],"source":["import nltk\n","nltk.download('wordnet')\n","# create the training data\n","training = []\n","# create empty array for the output\n","output_empty = [0] * len(classes)\n","# training set, bag of words for every sentence\n","for doc in documents:\n","    # initializing bag of words\n","\n","    bag = []\n","    # list of tokenized words for the pattern\n","    word_patterns = doc[0]\n","    # lemmatize each word - create base word, in attempt to represent related words\n","    word_patterns = [lemmatizer.lemmatize(word.lower()) for word in word_patterns]\n","    # create the bag of words array with 1, if word is found in current pattern\n","    for word in words:\n","        bag.append(1) if word in word_patterns else bag.append(0)\n","    # output is a '0' for each tag and '1' for current tag (for each pattern)\n","    output_row = list(output_empty)\n","    output_row[classes.index(doc[1])] = 1\n","    training.append([bag, output_row])\n","# shuffle the features and make numpy array\n","random.shuffle(training)\n","training = np.array(training)\n","# create training and testing lists. X - patterns, Y - intents\n","train_x = list(training[:,0])\n","train_y = list(training[:,1])\n","print(\"Training data is created\")"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":41706,"status":"ok","timestamp":1640456741409,"user":{"displayName":"Alex Chatbot","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16417906010517197924"},"user_tz":-330},"id":"N5SaLoZJ2kpo","outputId":"8a4c9015-2038-48d0-9949-2af877a492b4"},"outputs":[{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/keras/optimizer_v2/gradient_descent.py:102: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n","  super(SGD, self).__init__(name, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["Epoch 1/200\n","27/27 [==============================] - 1s 2ms/step - loss: 3.2958 - accuracy: 0.0758 \n","Epoch 2/200\n","27/27 [==============================] - 0s 2ms/step - loss: 3.1532 - accuracy: 0.1364\n","Epoch 3/200\n","27/27 [==============================] - 0s 2ms/step - loss: 2.9817 - accuracy: 0.1894\n","Epoch 4/200\n","27/27 [==============================] - 0s 2ms/step - loss: 2.8700 - accuracy: 0.1742\n","Epoch 5/200\n","27/27 [==============================] - 0s 2ms/step - loss: 2.7427 - accuracy: 0.2348\n","Epoch 6/200\n","27/27 [==============================] - 0s 2ms/step - loss: 2.6007 - accuracy: 0.2424\n","Epoch 7/200\n","27/27 [==============================] - 0s 2ms/step - loss: 2.3954 - accuracy: 0.2955\n","Epoch 8/200\n","27/27 [==============================] - 0s 2ms/step - loss: 2.2744 - accuracy: 0.3485\n","Epoch 9/200\n","27/27 [==============================] - 0s 2ms/step - loss: 2.2160 - accuracy: 0.3485\n","Epoch 10/200\n","27/27 [==============================] - 0s 2ms/step - loss: 2.0890 - accuracy: 0.3561\n","Epoch 11/200\n","27/27 [==============================] - 0s 2ms/step - loss: 2.0008 - accuracy: 0.3712\n","Epoch 12/200\n","27/27 [==============================] - 0s 2ms/step - loss: 2.0163 - accuracy: 0.3258\n","Epoch 13/200\n","27/27 [==============================] - 0s 2ms/step - loss: 1.8328 - accuracy: 0.4015\n","Epoch 14/200\n","27/27 [==============================] - 0s 2ms/step - loss: 1.9300 - accuracy: 0.4167\n","Epoch 15/200\n","27/27 [==============================] - 0s 2ms/step - loss: 1.9528 - accuracy: 0.4091\n","Epoch 16/200\n","27/27 [==============================] - 0s 2ms/step - loss: 1.7616 - accuracy: 0.4394\n","Epoch 17/200\n","27/27 [==============================] - 0s 2ms/step - loss: 1.7298 - accuracy: 0.4394\n","Epoch 18/200\n","27/27 [==============================] - 0s 2ms/step - loss: 1.7720 - accuracy: 0.4621\n","Epoch 19/200\n","27/27 [==============================] - 0s 2ms/step - loss: 1.6810 - accuracy: 0.5152\n","Epoch 20/200\n","27/27 [==============================] - 0s 2ms/step - loss: 1.8085 - accuracy: 0.4167\n","Epoch 21/200\n","27/27 [==============================] - 0s 2ms/step - loss: 1.4921 - accuracy: 0.4924\n","Epoch 22/200\n","27/27 [==============================] - 0s 3ms/step - loss: 1.4140 - accuracy: 0.5530\n","Epoch 23/200\n","27/27 [==============================] - 0s 4ms/step - loss: 1.4548 - accuracy: 0.5379\n","Epoch 24/200\n","27/27 [==============================] - 0s 5ms/step - loss: 1.3448 - accuracy: 0.5530\n","Epoch 25/200\n","27/27 [==============================] - 0s 3ms/step - loss: 1.5257 - accuracy: 0.5227\n","Epoch 26/200\n","27/27 [==============================] - 0s 2ms/step - loss: 1.4666 - accuracy: 0.4773\n","Epoch 27/200\n","27/27 [==============================] - 0s 2ms/step - loss: 1.3680 - accuracy: 0.5833\n","Epoch 28/200\n","27/27 [==============================] - 0s 3ms/step - loss: 1.3404 - accuracy: 0.5985\n","Epoch 29/200\n","27/27 [==============================] - 0s 3ms/step - loss: 1.3099 - accuracy: 0.5530\n","Epoch 30/200\n","27/27 [==============================] - 0s 4ms/step - loss: 1.2419 - accuracy: 0.6212\n","Epoch 31/200\n","27/27 [==============================] - 0s 5ms/step - loss: 1.2939 - accuracy: 0.5985\n","Epoch 32/200\n","27/27 [==============================] - 0s 3ms/step - loss: 1.2300 - accuracy: 0.6212\n","Epoch 33/200\n","27/27 [==============================] - 0s 3ms/step - loss: 1.0781 - accuracy: 0.6288\n","Epoch 34/200\n","27/27 [==============================] - 0s 3ms/step - loss: 1.2021 - accuracy: 0.6136\n","Epoch 35/200\n","27/27 [==============================] - 0s 3ms/step - loss: 1.0146 - accuracy: 0.6818\n","Epoch 36/200\n","27/27 [==============================] - 0s 3ms/step - loss: 1.0876 - accuracy: 0.6591\n","Epoch 37/200\n","27/27 [==============================] - 0s 4ms/step - loss: 1.1686 - accuracy: 0.6212\n","Epoch 38/200\n","27/27 [==============================] - 0s 6ms/step - loss: 1.1179 - accuracy: 0.6364\n","Epoch 39/200\n","27/27 [==============================] - 0s 4ms/step - loss: 1.0881 - accuracy: 0.6591\n","Epoch 40/200\n","27/27 [==============================] - 0s 5ms/step - loss: 1.1287 - accuracy: 0.6364\n","Epoch 41/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.9990 - accuracy: 0.7045\n","Epoch 42/200\n","27/27 [==============================] - 0s 2ms/step - loss: 0.8451 - accuracy: 0.7500\n","Epoch 43/200\n","27/27 [==============================] - 0s 2ms/step - loss: 1.0533 - accuracy: 0.6818\n","Epoch 44/200\n","27/27 [==============================] - 0s 3ms/step - loss: 1.0713 - accuracy: 0.6742\n","Epoch 45/200\n","27/27 [==============================] - 0s 5ms/step - loss: 1.0046 - accuracy: 0.6818\n","Epoch 46/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.8402 - accuracy: 0.7273\n","Epoch 47/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.8231 - accuracy: 0.7500\n","Epoch 48/200\n","27/27 [==============================] - 0s 4ms/step - loss: 1.0048 - accuracy: 0.7045\n","Epoch 49/200\n","27/27 [==============================] - 0s 2ms/step - loss: 0.9246 - accuracy: 0.7273\n","Epoch 50/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.7914 - accuracy: 0.7424\n","Epoch 51/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.8292 - accuracy: 0.7500\n","Epoch 52/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.8073 - accuracy: 0.7500\n","Epoch 53/200\n","27/27 [==============================] - 0s 4ms/step - loss: 0.7026 - accuracy: 0.7803\n","Epoch 54/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.7996 - accuracy: 0.7348\n","Epoch 55/200\n","27/27 [==============================] - 0s 4ms/step - loss: 0.7386 - accuracy: 0.7424\n","Epoch 56/200\n","27/27 [==============================] - 0s 5ms/step - loss: 0.8301 - accuracy: 0.7500\n","Epoch 57/200\n","27/27 [==============================] - 0s 4ms/step - loss: 0.8062 - accuracy: 0.7348\n","Epoch 58/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.8468 - accuracy: 0.7121\n","Epoch 59/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.8589 - accuracy: 0.7652\n","Epoch 60/200\n","27/27 [==============================] - 0s 4ms/step - loss: 0.8037 - accuracy: 0.7197\n","Epoch 61/200\n","27/27 [==============================] - 0s 4ms/step - loss: 0.8961 - accuracy: 0.7727\n","Epoch 62/200\n","27/27 [==============================] - 0s 7ms/step - loss: 0.9223 - accuracy: 0.6894\n","Epoch 63/200\n","27/27 [==============================] - 0s 5ms/step - loss: 0.6961 - accuracy: 0.7955\n","Epoch 64/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.8725 - accuracy: 0.7121\n","Epoch 65/200\n","27/27 [==============================] - 0s 6ms/step - loss: 0.7024 - accuracy: 0.8182\n","Epoch 66/200\n","27/27 [==============================] - 0s 5ms/step - loss: 0.6563 - accuracy: 0.7727\n","Epoch 67/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.5401 - accuracy: 0.8258\n","Epoch 68/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.7371 - accuracy: 0.7652\n","Epoch 69/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.7710 - accuracy: 0.7727\n","Epoch 70/200\n","27/27 [==============================] - 0s 4ms/step - loss: 0.7535 - accuracy: 0.7727\n","Epoch 71/200\n","27/27 [==============================] - 0s 4ms/step - loss: 0.7408 - accuracy: 0.7576\n","Epoch 72/200\n","27/27 [==============================] - 0s 5ms/step - loss: 0.6740 - accuracy: 0.8182\n","Epoch 73/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.5962 - accuracy: 0.8258\n","Epoch 74/200\n","27/27 [==============================] - 0s 7ms/step - loss: 0.5263 - accuracy: 0.8333\n","Epoch 75/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.7608 - accuracy: 0.7803\n","Epoch 76/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.6219 - accuracy: 0.8182\n","Epoch 77/200\n","27/27 [==============================] - 0s 6ms/step - loss: 0.6386 - accuracy: 0.8106\n","Epoch 78/200\n","27/27 [==============================] - 0s 5ms/step - loss: 0.7236 - accuracy: 0.8030\n","Epoch 79/200\n","27/27 [==============================] - 0s 7ms/step - loss: 0.7588 - accuracy: 0.7727\n","Epoch 80/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.7226 - accuracy: 0.7879\n","Epoch 81/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.6348 - accuracy: 0.8182\n","Epoch 82/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.8537 - accuracy: 0.7197\n","Epoch 83/200\n","27/27 [==============================] - 0s 5ms/step - loss: 0.5772 - accuracy: 0.8182\n","Epoch 84/200\n","27/27 [==============================] - 0s 7ms/step - loss: 0.5523 - accuracy: 0.8258\n","Epoch 85/200\n","27/27 [==============================] - 0s 8ms/step - loss: 0.5080 - accuracy: 0.7955\n","Epoch 86/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.6257 - accuracy: 0.7803\n","Epoch 87/200\n","27/27 [==============================] - 0s 5ms/step - loss: 0.5988 - accuracy: 0.8409\n","Epoch 88/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.6895 - accuracy: 0.7727\n","Epoch 89/200\n","27/27 [==============================] - 0s 2ms/step - loss: 0.5728 - accuracy: 0.8182\n","Epoch 90/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.7016 - accuracy: 0.7727\n","Epoch 91/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.6819 - accuracy: 0.7727\n","Epoch 92/200\n","27/27 [==============================] - 0s 2ms/step - loss: 0.7131 - accuracy: 0.7727\n","Epoch 93/200\n","27/27 [==============================] - 0s 5ms/step - loss: 0.6303 - accuracy: 0.7879\n","Epoch 94/200\n","27/27 [==============================] - 0s 5ms/step - loss: 0.6609 - accuracy: 0.8182\n","Epoch 95/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.7756 - accuracy: 0.7727\n","Epoch 96/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.5878 - accuracy: 0.7727\n","Epoch 97/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.6390 - accuracy: 0.7803\n","Epoch 98/200\n","27/27 [==============================] - 0s 2ms/step - loss: 0.4703 - accuracy: 0.8333\n","Epoch 99/200\n","27/27 [==============================] - 0s 5ms/step - loss: 0.5281 - accuracy: 0.8333\n","Epoch 100/200\n","27/27 [==============================] - 0s 5ms/step - loss: 0.4736 - accuracy: 0.8409\n","Epoch 101/200\n","27/27 [==============================] - 0s 4ms/step - loss: 0.4132 - accuracy: 0.8561\n","Epoch 102/200\n","27/27 [==============================] - 0s 4ms/step - loss: 0.4926 - accuracy: 0.8409\n","Epoch 103/200\n","27/27 [==============================] - 0s 5ms/step - loss: 0.5690 - accuracy: 0.8030\n","Epoch 104/200\n","27/27 [==============================] - 0s 4ms/step - loss: 0.4913 - accuracy: 0.8258\n","Epoch 105/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.6118 - accuracy: 0.8030\n","Epoch 106/200\n","27/27 [==============================] - 0s 5ms/step - loss: 0.6164 - accuracy: 0.8030\n","Epoch 107/200\n","27/27 [==============================] - 0s 4ms/step - loss: 0.5286 - accuracy: 0.8030\n","Epoch 108/200\n","27/27 [==============================] - 0s 6ms/step - loss: 0.4804 - accuracy: 0.8712\n","Epoch 109/200\n","27/27 [==============================] - 0s 5ms/step - loss: 0.5269 - accuracy: 0.7955\n","Epoch 110/200\n","27/27 [==============================] - 0s 4ms/step - loss: 0.5480 - accuracy: 0.8409\n","Epoch 111/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.5797 - accuracy: 0.8561\n","Epoch 112/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.5761 - accuracy: 0.8333\n","Epoch 113/200\n","27/27 [==============================] - 0s 4ms/step - loss: 0.6771 - accuracy: 0.7879\n","Epoch 114/200\n","27/27 [==============================] - 0s 5ms/step - loss: 0.6159 - accuracy: 0.8182\n","Epoch 115/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.8921 - accuracy: 0.7576\n","Epoch 116/200\n","27/27 [==============================] - 0s 4ms/step - loss: 0.6099 - accuracy: 0.8182\n","Epoch 117/200\n","27/27 [==============================] - 0s 4ms/step - loss: 0.6881 - accuracy: 0.7879\n","Epoch 118/200\n","27/27 [==============================] - 0s 5ms/step - loss: 0.6325 - accuracy: 0.8333\n","Epoch 119/200\n","27/27 [==============================] - 0s 4ms/step - loss: 0.5828 - accuracy: 0.8182\n","Epoch 120/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.6226 - accuracy: 0.8258\n","Epoch 121/200\n","27/27 [==============================] - 0s 4ms/step - loss: 0.7948 - accuracy: 0.7803\n","Epoch 122/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.6679 - accuracy: 0.8030\n","Epoch 123/200\n","27/27 [==============================] - 0s 5ms/step - loss: 0.6793 - accuracy: 0.7879\n","Epoch 124/200\n","27/27 [==============================] - 0s 5ms/step - loss: 0.5026 - accuracy: 0.8106\n","Epoch 125/200\n","27/27 [==============================] - 0s 4ms/step - loss: 0.5803 - accuracy: 0.8258\n","Epoch 126/200\n","27/27 [==============================] - 0s 4ms/step - loss: 0.5909 - accuracy: 0.8409\n","Epoch 127/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.6400 - accuracy: 0.7727\n","Epoch 128/200\n","27/27 [==============================] - 0s 5ms/step - loss: 0.6963 - accuracy: 0.7803\n","Epoch 129/200\n","27/27 [==============================] - 0s 5ms/step - loss: 0.6717 - accuracy: 0.8030\n","Epoch 130/200\n","27/27 [==============================] - 0s 4ms/step - loss: 0.5517 - accuracy: 0.8258\n","Epoch 131/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.6379 - accuracy: 0.8333\n","Epoch 132/200\n","27/27 [==============================] - 0s 7ms/step - loss: 0.5945 - accuracy: 0.7879\n","Epoch 133/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.6270 - accuracy: 0.7955\n","Epoch 134/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.5551 - accuracy: 0.8106\n","Epoch 135/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.5024 - accuracy: 0.8485\n","Epoch 136/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.6248 - accuracy: 0.7727\n","Epoch 137/200\n","27/27 [==============================] - 0s 5ms/step - loss: 0.6248 - accuracy: 0.7652\n","Epoch 138/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.6278 - accuracy: 0.7652\n","Epoch 139/200\n","27/27 [==============================] - 0s 5ms/step - loss: 0.5971 - accuracy: 0.8182\n","Epoch 140/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.5655 - accuracy: 0.8106\n","Epoch 141/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.6258 - accuracy: 0.8106\n","Epoch 142/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.5404 - accuracy: 0.8409\n","Epoch 143/200\n","27/27 [==============================] - 0s 5ms/step - loss: 0.4713 - accuracy: 0.8712\n","Epoch 144/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.6331 - accuracy: 0.8106\n","Epoch 145/200\n","27/27 [==============================] - 0s 4ms/step - loss: 0.4681 - accuracy: 0.8409\n","Epoch 146/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.5821 - accuracy: 0.8182\n","Epoch 147/200\n","27/27 [==============================] - 0s 4ms/step - loss: 0.5053 - accuracy: 0.8409\n","Epoch 148/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.5437 - accuracy: 0.8182\n","Epoch 149/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.6078 - accuracy: 0.8636\n","Epoch 150/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.3880 - accuracy: 0.8485\n","Epoch 151/200\n","27/27 [==============================] - 0s 2ms/step - loss: 0.4509 - accuracy: 0.8409\n","Epoch 152/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.4916 - accuracy: 0.8333\n","Epoch 153/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.5358 - accuracy: 0.8030\n","Epoch 154/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.5063 - accuracy: 0.8485\n","Epoch 155/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.5657 - accuracy: 0.7879\n","Epoch 156/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.5673 - accuracy: 0.8106\n","Epoch 157/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.4356 - accuracy: 0.8561\n","Epoch 158/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.4638 - accuracy: 0.8258\n","Epoch 159/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.4695 - accuracy: 0.8258\n","Epoch 160/200\n","27/27 [==============================] - 0s 5ms/step - loss: 0.4255 - accuracy: 0.8333\n","Epoch 161/200\n","27/27 [==============================] - 0s 7ms/step - loss: 0.5354 - accuracy: 0.7879\n","Epoch 162/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.6927 - accuracy: 0.7727\n","Epoch 163/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.4904 - accuracy: 0.8182\n","Epoch 164/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.5315 - accuracy: 0.8561\n","Epoch 165/200\n","27/27 [==============================] - 0s 4ms/step - loss: 0.4540 - accuracy: 0.8788\n","Epoch 166/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.6111 - accuracy: 0.8485\n","Epoch 167/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.4381 - accuracy: 0.8712\n","Epoch 168/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.4123 - accuracy: 0.8485\n","Epoch 169/200\n","27/27 [==============================] - 0s 5ms/step - loss: 0.5665 - accuracy: 0.8106\n","Epoch 170/200\n","27/27 [==============================] - 0s 2ms/step - loss: 0.4402 - accuracy: 0.8409\n","Epoch 171/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.5955 - accuracy: 0.8333\n","Epoch 172/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.4707 - accuracy: 0.7955\n","Epoch 173/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.5590 - accuracy: 0.8333\n","Epoch 174/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.5413 - accuracy: 0.8182\n","Epoch 175/200\n","27/27 [==============================] - 0s 2ms/step - loss: 0.4897 - accuracy: 0.8409\n","Epoch 176/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.6718 - accuracy: 0.7955\n","Epoch 177/200\n","27/27 [==============================] - 0s 4ms/step - loss: 0.4702 - accuracy: 0.8409\n","Epoch 178/200\n","27/27 [==============================] - 0s 5ms/step - loss: 0.5437 - accuracy: 0.8409\n","Epoch 179/200\n","27/27 [==============================] - 0s 5ms/step - loss: 0.4325 - accuracy: 0.8485\n","Epoch 180/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.3723 - accuracy: 0.8485\n","Epoch 181/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.4121 - accuracy: 0.8561\n","Epoch 182/200\n","27/27 [==============================] - 0s 4ms/step - loss: 0.6014 - accuracy: 0.8106\n","Epoch 183/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.6541 - accuracy: 0.8258\n","Epoch 184/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.6692 - accuracy: 0.7879\n","Epoch 185/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.5568 - accuracy: 0.7955\n","Epoch 186/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.6122 - accuracy: 0.8182\n","Epoch 187/200\n","27/27 [==============================] - 0s 5ms/step - loss: 0.6218 - accuracy: 0.7955\n","Epoch 188/200\n","27/27 [==============================] - 0s 5ms/step - loss: 0.7236 - accuracy: 0.8258\n","Epoch 189/200\n","27/27 [==============================] - 0s 5ms/step - loss: 0.5030 - accuracy: 0.8106\n","Epoch 190/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.5346 - accuracy: 0.8182\n","Epoch 191/200\n","27/27 [==============================] - 0s 5ms/step - loss: 0.5287 - accuracy: 0.8333\n","Epoch 192/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.6118 - accuracy: 0.7955\n","Epoch 193/200\n","27/27 [==============================] - 0s 4ms/step - loss: 0.5511 - accuracy: 0.8106\n","Epoch 194/200\n","27/27 [==============================] - 0s 4ms/step - loss: 0.5225 - accuracy: 0.7879\n","Epoch 195/200\n","27/27 [==============================] - 0s 4ms/step - loss: 0.6020 - accuracy: 0.8030\n","Epoch 196/200\n","27/27 [==============================] - 0s 4ms/step - loss: 0.6190 - accuracy: 0.8182\n","Epoch 197/200\n","27/27 [==============================] - 0s 4ms/step - loss: 0.5430 - accuracy: 0.8485\n","Epoch 198/200\n","27/27 [==============================] - 0s 3ms/step - loss: 0.5164 - accuracy: 0.8182\n","Epoch 199/200\n","27/27 [==============================] - 0s 5ms/step - loss: 0.4017 - accuracy: 0.8636\n","Epoch 200/200\n","27/27 [==============================] - 0s 4ms/step - loss: 0.4972 - accuracy: 0.8333\n","model is created\n"]}],"source":["# deep neural networks model\n","model = Sequential()\n","model.add(Dense(128, input_shape=(len(train_x[0]),), activation='relu'))\n","model.add(Dropout(0.5))\n","model.add(Dense(64, activation='relu'))\n","model.add(Dropout(0.5))\n","model.add(Dense(len(train_y[0]), activation='softmax'))\n","# Compiling model. SGD with Nesterov accelerated gradient gives good results for this model\n","sgd = SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)\n","model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])\n","#Training and saving the model \n","hist = model.fit(np.array(train_x), np.array(train_y), epochs=200, batch_size=5, verbose=1)\n","model.save('chatbot_model.h5', hist)\n","print(\"model is created\")"]},{"cell_type":"code","execution_count":11,"metadata":{"executionInfo":{"elapsed":682,"status":"ok","timestamp":1640456742083,"user":{"displayName":"Alex Chatbot","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16417906010517197924"},"user_tz":-330},"id":"chIZ8fT222Lo"},"outputs":[],"source":["import nltk\n","from nltk.stem import WordNetLemmatizer\n","lemmatizer = WordNetLemmatizer()\n","import pickle\n","import numpy as np\n","from keras.models import load_model\n","model = load_model('chatbot_model.h5')\n","import json\n","import random\n","intents = json.loads(open('/content/drive/MyDrive/Colab Notebooks/intents.json').read())\n","words = pickle.load(open('/content/drive/MyDrive/Colab Notebooks/words.pkl','rb'))\n","classes = pickle.load(open('/content/drive/MyDrive/Colab Notebooks/classes.pkl','rb'))\n","def clean_up_sentence(sentence):\n","    # tokenize the pattern - splitting words into array\n","    sentence_words = nltk.word_tokenize(sentence)\n","    # stemming every word - reducing to base form\n","    sentence_words = [lemmatizer.lemmatize(word.lower()) for word in sentence_words]\n","    return sentence_words\n","# return bag of words array: 0 or 1 for words that exist in sentence\n","def bag_of_words(sentence, words, show_details=True):\n","    # tokenizing patterns\n","    sentence_words = clean_up_sentence(sentence)\n","    # bag of words - vocabulary matrix\n","    bag = [0]*len(words)  \n","    for s in sentence_words:\n","        for i,word in enumerate(words):\n","            if word == s: \n","                # assign 1 if current word is in the vocabulary position\n","                bag[i] = 1\n","                if show_details:\n","                    print (\"found in bag: %s\" % word)\n","    return(np.array(bag))\n","def predict_class(sentence):\n","    # filter below  threshold predictions\n","    p = bag_of_words(sentence, words,show_details=False)\n","    res = model.predict(np.array([p]))[0]\n","    ERROR_THRESHOLD = 0.25\n","    results = [[i,r] for i,r in enumerate(res) if r\u003eERROR_THRESHOLD]\n","    # sorting strength probability\n","    results.sort(key=lambda x: x[1], reverse=True)\n","    return_list = []\n","    for r in results:\n","        return_list.append({\"intent\": classes[r[0]], \"probability\": str(r[1])})\n","    return return_list\n","def getResponse(ints, intents_json):\n","    tag = ints[0]['intent']\n","    list_of_intents = intents_json['intents']\n","    for i in list_of_intents:\n","        if(i['tag']== tag):\n","            result = random.choice(i['responses'])\n","            break\n","    return result"]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10103,"status":"ok","timestamp":1640456752181,"user":{"displayName":"Alex Chatbot","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16417906010517197924"},"user_tz":-330},"id":"naiGxGhK7wgu","outputId":"f2ad5577-7691-44fc-e297-ed591f63775d"},"outputs":[{"name":"stdout","output_type":"stream","text":["[(['hi'], 'greeting'), (['hello'], 'greeting'), (['what', \"'s\", 'up'], 'greeting'), (['sup'], 'greeting'), (['is', 'anyone', 'there'], 'greeting'), (['whats', 'good'], 'greeting'), (['hey'], 'greeting'), (['bye'], 'goodbye'), (['cya'], 'goodbye'), (['see', 'you', 'later'], 'goodbye'), (['goodbye'], 'goodbye'), (['im', 'leaving'], 'goodbye'), (['have', 'a', 'good', 'day'], 'goodbye'), (['Who', 'is', 'your', 'creator'], 'creation'), (['Who', 'made', 'you'], 'creation'), (['who', 'built', 'you'], 'creation'), (['how', 'old', 'are', 'you', '?'], 'age'), (['what', 'is', 'your', 'age', '?'], 'age'), (['whats', 'your', 'age', '?'], 'age'), (['thanks'], 'thanks'), (['thank', 'you'], 'thanks'), (['thankyou'], 'thanks'), (['ty'], 'thanks'), (['I', 'owe', 'you', 'one'], 'thanks'), (['whats', 'is', 'your', 'name'], 'name'), (['whats', 'your', 'name'], 'name'), (['whats', 'should', 'I', 'call', 'you'], 'name'), (['how', 'should', 'I', 'address', 'you'], 'name'), (['Yes', 'it', 'does'], 'yes'), (['Yeah'], 'yes'), (['Haha', 'yep'], 'yes'), (['yes'], 'yes'), (['Indeed'], 'yes'), (['Yup'], 'yes'), (['yep'], 'yes'), (['Oh', 'really'], 'yes'), (['Okay'], 'yes'), (['Okie'], 'yes'), (['Ok'], 'yes'), (['I', 'see'], 'yes'), (['why'], 'why'), (['what'], 'why'), (['whats', 'that'], 'why'), (['no'], 'no'), (['nah'], 'no'), (['not', 'really'], 'no'), (['thats', 'scary'], 'no'), (['singularity'], 'no'), (['what', 'are', 'you', 'doing', 'now', '?'], 'how_are_you'), (['What', 'are', 'you', 'doing', '?'], 'how_are_you'), (['what', 'you', 'doin'], 'how_are_you'), (['how', 'are', 'you'], 'how_are_you'), (['how', 'are', 'you', 'doing'], 'how_are_you'), (['what', 'is', 'going', 'on'], 'how_are_you'), (['what', 'are', 'you', 'doing'], 'how_are_you'), (['fuck'], 'abusive'), (['fuck', 'you'], 'abusive'), (['fuck', 'off'], 'abusive'), (['fuck', 'yourself'], 'abusive'), (['I', 'am', 'doing', 'great'], 'doing_great'), (['I', 'am', 'well'], 'doing_great'), (['Im', 'great'], 'doing_great'), (['awesome'], 'doing_great'), (['happy'], 'doing_great'), (['better'], 'doing_great'), (['not', 'great'], 'doing_badly'), (['not', 'well'], 'doing_badly'), (['not', 'good'], 'doing_badly'), (['bad'], 'doing_badly'), (['badly'], 'doing_badly'), (['terrible'], 'doing_badly'), (['horrible'], 'doing_badly'), (['awful'], 'doing_badly'), (['sad'], 'doing_badly'), (['break'], 'doing_badly'), (['depressed'], 'doing_badly'), (['depression'], 'doing_badly'), (['wait', 'you', 'watch', 'Netflix'], 'netflix'), (['how', 'do', 'you', 'watch', 'Netflix'], 'netflix'), (['Netflix'], 'netflix'), (['I', 'love', 'to', 'watch', 'netflix'], 'netflix'), (['I', 'love', 'netflix', 'and', 'chill'], 'netflix'), (['how', 'can', 'you', 'run'], 'quick_run'), (['how', 'do', 'you', 'run'], 'quick_run'), (['how', 'run'], 'quick_run'), (['why', 'run'], 'quick_run'), (['run'], 'quick_run'), (['are', 'you', 'real'], 'real_bot'), (['are', 'you', 'human'], 'real_bot'), (['are', 'you', 'a', 'robot'], 'real_bot'), (['are', 'you', 'alive'], 'real_bot'), (['are', 'you', 'sentient'], 'real_bot'), (['are', 'you', 'conscious'], 'real_bot'), (['tell', 'me', 'joke'], 'joke'), (['got', 'any', 'good', 'jokes'], 'joke'), (['got', 'jokes'], 'joke'), (['can', 'you', 'tell', 'joke'], 'joke'), (['tell', 'joke'], 'joke'), (['how', 'about', 'another', 'one'], 'joke'), (['joke'], 'joke'), (['haha'], 'good_joke'), (['that', 'was', 'funny'], 'good_joke'), (['very', 'funny'], 'good_joke'), (['good', 'one'], 'good_joke'), (['real', 'funny'], 'good_joke'), (['bad', 'joke'], 'bad_joke'), (['trash', 'joke'], 'bad_joke'), (['terrible'], 'bad_joke'), (['not', 'funny'], 'bad_joke'), (['whats', 'wrong'], 'hate'), (['I', 'hate', 'you'], 'hate'), (['you', 'stupid'], 'hate'), (['you', 'dumb'], 'hate'), (['you', 'mean'], 'hate'), (['you', 'my', 'friend'], 'like'), (['I', 'like', 'you'], 'like'), (['you', 'cool'], 'like'), (['you', 'are', 'chill'], 'like'), (['I', 'love', 'you'], 'love'), (['I', 'think', 'I', 'love', 'you'], 'love'), (['whats', 'your', 'favorite', 'show'], 'favorite_show'), (['favorite', 'tv', 'show'], 'favorite_show'), (['favorite', 'show'], 'favorite_show'), (['Whats', 'your', 'favorite', 'movie'], 'favorite_movie'), (['whats', 'your', 'favorite', 'film'], 'favorite_movie'), (['best', 'movie'], 'favorite_movie'), (['your', 'favorite', 'movie'], 'favorite_movie'), (['whats', 'favorite', 'movie'], 'favorite_movie'), (['whats', 'your', 'favorite', 'food'], 'favorite_food'), (['favorite', 'food'], 'favorite_food'), (['What', 'do', 'you', 'think', 'about'], 'your_thoughts'), (['What', 'your', 'thoughts'], 'your_thoughts')]\n","132 documents\n","26 classes ['abusive', 'age', 'bad_joke', 'creation', 'doing_badly', 'doing_great', 'favorite_food', 'favorite_movie', 'favorite_show', 'good_joke', 'goodbye', 'greeting', 'hate', 'how_are_you', 'joke', 'like', 'love', 'name', 'netflix', 'no', 'quick_run', 'real_bot', 'thanks', 'why', 'yes', 'your_thoughts']\n","132 unique lemmatized words [\"'s\", 'a', 'about', 'address', 'age', 'alive', 'am', 'and', 'another', 'any', 'anyone', 'are', 'awesome', 'awful', 'bad', 'badly', 'best', 'better', 'break', 'built', 'bye', 'call', 'can', 'chill', 'conscious', 'cool', 'creator', 'cya', 'day', 'depressed', 'depression', 'do', 'doe', 'doin', 'doing', 'dumb', 'favorite', 'film', 'food', 'friend', 'fuck', 'funny', 'going', 'good', 'goodbye', 'got', 'great', 'haha', 'happy', 'hate', 'have', 'hello', 'hey', 'hi', 'horrible', 'how', 'human', 'i', 'im', 'indeed', 'is', 'it', 'joke', 'later', 'leaving', 'like', 'love', 'made', 'me', 'mean', 'movie', 'my', 'nah', 'name', 'netflix', 'no', 'not', 'now', 'off', 'oh', 'ok', 'okay', 'okie', 'old', 'on', 'one', 'owe', 'real', 'really', 'robot', 'run', 'sad', 'scary', 'see', 'sentient', 'should', 'show', 'singularity', 'stupid', 'sup', 'tell', 'terrible', 'thank', 'thanks', 'thankyou', 'that', 'thats', 'there', 'think', 'thought', 'to', 'trash', 'tv', 'ty', 'up', 'very', 'wa', 'wait', 'watch', 'well', 'what', 'whats', 'who', 'why', 'wrong', 'yeah', 'yep', 'yes', 'you', 'your', 'yourself', 'yup']\n","Training data created\n","Epoch 1/172\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:70: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","/usr/local/lib/python3.7/dist-packages/keras/optimizer_v2/gradient_descent.py:102: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n","  super(SGD, self).__init__(name, **kwargs)\n"]},{"name":"stdout","output_type":"stream","text":["27/27 [==============================] - 0s 2ms/step - loss: 3.2744 - accuracy: 0.0303 \n","Epoch 2/172\n","27/27 [==============================] - 0s 2ms/step - loss: 3.1976 - accuracy: 0.1288\n","Epoch 3/172\n","27/27 [==============================] - 0s 1ms/step - loss: 3.1487 - accuracy: 0.0985\n","Epoch 4/172\n","27/27 [==============================] - 0s 2ms/step - loss: 3.1046 - accuracy: 0.1136\n","Epoch 5/172\n","27/27 [==============================] - 0s 2ms/step - loss: 3.0083 - accuracy: 0.1667\n","Epoch 6/172\n","27/27 [==============================] - 0s 2ms/step - loss: 2.9168 - accuracy: 0.1818\n","Epoch 7/172\n","27/27 [==============================] - 0s 2ms/step - loss: 2.8763 - accuracy: 0.2273\n","Epoch 8/172\n","27/27 [==============================] - 0s 2ms/step - loss: 2.7448 - accuracy: 0.2803\n","Epoch 9/172\n","27/27 [==============================] - 0s 1ms/step - loss: 2.6744 - accuracy: 0.2879\n","Epoch 10/172\n","27/27 [==============================] - 0s 2ms/step - loss: 2.5163 - accuracy: 0.3258\n","Epoch 11/172\n","27/27 [==============================] - 0s 2ms/step - loss: 2.3590 - accuracy: 0.3561\n","Epoch 12/172\n","27/27 [==============================] - 0s 2ms/step - loss: 2.1725 - accuracy: 0.3636\n","Epoch 13/172\n","27/27 [==============================] - 0s 2ms/step - loss: 2.1643 - accuracy: 0.4015\n","Epoch 14/172\n","27/27 [==============================] - 0s 2ms/step - loss: 2.1107 - accuracy: 0.3561\n","Epoch 15/172\n","27/27 [==============================] - 0s 2ms/step - loss: 2.0222 - accuracy: 0.3864\n","Epoch 16/172\n","27/27 [==============================] - 0s 2ms/step - loss: 1.8527 - accuracy: 0.5152\n","Epoch 17/172\n","27/27 [==============================] - 0s 2ms/step - loss: 1.9164 - accuracy: 0.4545\n","Epoch 18/172\n","27/27 [==============================] - 0s 2ms/step - loss: 1.7003 - accuracy: 0.5682\n","Epoch 19/172\n","27/27 [==============================] - 0s 2ms/step - loss: 1.5185 - accuracy: 0.6061\n","Epoch 20/172\n","27/27 [==============================] - 0s 1ms/step - loss: 1.4777 - accuracy: 0.5303\n","Epoch 21/172\n","27/27 [==============================] - 0s 2ms/step - loss: 1.3820 - accuracy: 0.5758\n","Epoch 22/172\n","27/27 [==============================] - 0s 2ms/step - loss: 1.2964 - accuracy: 0.5985\n","Epoch 23/172\n","27/27 [==============================] - 0s 2ms/step - loss: 1.1437 - accuracy: 0.6591\n","Epoch 24/172\n","27/27 [==============================] - 0s 2ms/step - loss: 1.1674 - accuracy: 0.6970\n","Epoch 25/172\n","27/27 [==============================] - 0s 2ms/step - loss: 1.1777 - accuracy: 0.6136\n","Epoch 26/172\n","27/27 [==============================] - 0s 2ms/step - loss: 1.0052 - accuracy: 0.7121\n","Epoch 27/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.9577 - accuracy: 0.7045\n","Epoch 28/172\n","27/27 [==============================] - 0s 2ms/step - loss: 1.0061 - accuracy: 0.7121\n","Epoch 29/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.7300 - accuracy: 0.8030\n","Epoch 30/172\n","27/27 [==============================] - 0s 3ms/step - loss: 0.8940 - accuracy: 0.7424\n","Epoch 31/172\n","27/27 [==============================] - 0s 4ms/step - loss: 0.8632 - accuracy: 0.7500\n","Epoch 32/172\n","27/27 [==============================] - 0s 4ms/step - loss: 0.8455 - accuracy: 0.7424\n","Epoch 33/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.7505 - accuracy: 0.8030\n","Epoch 34/172\n","27/27 [==============================] - 0s 3ms/step - loss: 0.7495 - accuracy: 0.8182\n","Epoch 35/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.6866 - accuracy: 0.8106\n","Epoch 36/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.6719 - accuracy: 0.8182\n","Epoch 37/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.5948 - accuracy: 0.8409\n","Epoch 38/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.5582 - accuracy: 0.8409\n","Epoch 39/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.5753 - accuracy: 0.8333\n","Epoch 40/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.5933 - accuracy: 0.8182\n","Epoch 41/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.4231 - accuracy: 0.8864\n","Epoch 42/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.4941 - accuracy: 0.8409\n","Epoch 43/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.5950 - accuracy: 0.8485\n","Epoch 44/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.4211 - accuracy: 0.8939\n","Epoch 45/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.4469 - accuracy: 0.8485\n","Epoch 46/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.4172 - accuracy: 0.9091\n","Epoch 47/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.4033 - accuracy: 0.8939\n","Epoch 48/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.4544 - accuracy: 0.8561\n","Epoch 49/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.3948 - accuracy: 0.9167\n","Epoch 50/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.4253 - accuracy: 0.8561\n","Epoch 51/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.4818 - accuracy: 0.8712\n","Epoch 52/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.3543 - accuracy: 0.8939\n","Epoch 53/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.4060 - accuracy: 0.8788\n","Epoch 54/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.3258 - accuracy: 0.9015\n","Epoch 55/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.3141 - accuracy: 0.9091\n","Epoch 56/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.3775 - accuracy: 0.8864\n","Epoch 57/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.3835 - accuracy: 0.8864\n","Epoch 58/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.3443 - accuracy: 0.9242\n","Epoch 59/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.2444 - accuracy: 0.9242\n","Epoch 60/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.3280 - accuracy: 0.8939\n","Epoch 61/172\n","27/27 [==============================] - 0s 1ms/step - loss: 0.3192 - accuracy: 0.9242\n","Epoch 62/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.3068 - accuracy: 0.8939\n","Epoch 63/172\n","27/27 [==============================] - 0s 1ms/step - loss: 0.2591 - accuracy: 0.9242\n","Epoch 64/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.2738 - accuracy: 0.9091\n","Epoch 65/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.3893 - accuracy: 0.8636\n","Epoch 66/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.2404 - accuracy: 0.9470\n","Epoch 67/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.2670 - accuracy: 0.9242\n","Epoch 68/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.3117 - accuracy: 0.9091\n","Epoch 69/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.2348 - accuracy: 0.9242\n","Epoch 70/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.2198 - accuracy: 0.9242\n","Epoch 71/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.2386 - accuracy: 0.9242\n","Epoch 72/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.2988 - accuracy: 0.8788\n","Epoch 73/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.3025 - accuracy: 0.9167\n","Epoch 74/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.2769 - accuracy: 0.9318\n","Epoch 75/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1982 - accuracy: 0.9242\n","Epoch 76/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.2053 - accuracy: 0.9394\n","Epoch 77/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.2211 - accuracy: 0.9318\n","Epoch 78/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.2167 - accuracy: 0.9242\n","Epoch 79/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.2832 - accuracy: 0.9015\n","Epoch 80/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.2502 - accuracy: 0.9242\n","Epoch 81/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.2231 - accuracy: 0.9167\n","Epoch 82/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.2636 - accuracy: 0.8939\n","Epoch 83/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1601 - accuracy: 0.9545\n","Epoch 84/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1962 - accuracy: 0.9470\n","Epoch 85/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.2172 - accuracy: 0.9318\n","Epoch 86/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.2075 - accuracy: 0.9394\n","Epoch 87/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.2018 - accuracy: 0.9545\n","Epoch 88/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.2253 - accuracy: 0.9545\n","Epoch 89/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.2140 - accuracy: 0.9394\n","Epoch 90/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.2043 - accuracy: 0.9545\n","Epoch 91/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.2095 - accuracy: 0.9470\n","Epoch 92/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1765 - accuracy: 0.9318\n","Epoch 93/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1705 - accuracy: 0.9545\n","Epoch 94/172\n","27/27 [==============================] - 0s 1ms/step - loss: 0.3135 - accuracy: 0.8788\n","Epoch 95/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1298 - accuracy: 0.9848\n","Epoch 96/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1817 - accuracy: 0.9697\n","Epoch 97/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.2074 - accuracy: 0.9318\n","Epoch 98/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.2445 - accuracy: 0.9318\n","Epoch 99/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1620 - accuracy: 0.9697\n","Epoch 100/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1774 - accuracy: 0.9470\n","Epoch 101/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1277 - accuracy: 0.9621\n","Epoch 102/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1389 - accuracy: 0.9470\n","Epoch 103/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1297 - accuracy: 0.9697\n","Epoch 104/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.2222 - accuracy: 0.9242\n","Epoch 105/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1731 - accuracy: 0.9470\n","Epoch 106/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1871 - accuracy: 0.9242\n","Epoch 107/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.2091 - accuracy: 0.9318\n","Epoch 108/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1089 - accuracy: 0.9697\n","Epoch 109/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1750 - accuracy: 0.9318\n","Epoch 110/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1320 - accuracy: 0.9545\n","Epoch 111/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1843 - accuracy: 0.9394\n","Epoch 112/172\n","27/27 [==============================] - 0s 1ms/step - loss: 0.2019 - accuracy: 0.9470\n","Epoch 113/172\n","27/27 [==============================] - 0s 3ms/step - loss: 0.1283 - accuracy: 0.9621\n","Epoch 114/172\n","27/27 [==============================] - 0s 3ms/step - loss: 0.1806 - accuracy: 0.9242\n","Epoch 115/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1392 - accuracy: 0.9621\n","Epoch 116/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1689 - accuracy: 0.9545\n","Epoch 117/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1480 - accuracy: 0.9545\n","Epoch 118/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1964 - accuracy: 0.9242\n","Epoch 119/172\n","27/27 [==============================] - 0s 1ms/step - loss: 0.1733 - accuracy: 0.9621\n","Epoch 120/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1166 - accuracy: 0.9621\n","Epoch 121/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1495 - accuracy: 0.9545\n","Epoch 122/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.0917 - accuracy: 0.9848\n","Epoch 123/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1806 - accuracy: 0.9394\n","Epoch 124/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1635 - accuracy: 0.9545\n","Epoch 125/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1526 - accuracy: 0.9470\n","Epoch 126/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1232 - accuracy: 0.9545\n","Epoch 127/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1671 - accuracy: 0.9318\n","Epoch 128/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1144 - accuracy: 0.9621\n","Epoch 129/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1241 - accuracy: 0.9697\n","Epoch 130/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1200 - accuracy: 0.9621\n","Epoch 131/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.2183 - accuracy: 0.9394\n","Epoch 132/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1111 - accuracy: 0.9773\n","Epoch 133/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1388 - accuracy: 0.9545\n","Epoch 134/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1206 - accuracy: 0.9773\n","Epoch 135/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1703 - accuracy: 0.9545\n","Epoch 136/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1433 - accuracy: 0.9545\n","Epoch 137/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1659 - accuracy: 0.9697\n","Epoch 138/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1040 - accuracy: 0.9621\n","Epoch 139/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1170 - accuracy: 0.9697\n","Epoch 140/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.0944 - accuracy: 0.9697\n","Epoch 141/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1559 - accuracy: 0.9545\n","Epoch 142/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.0981 - accuracy: 0.9697\n","Epoch 143/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1157 - accuracy: 0.9621\n","Epoch 144/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1365 - accuracy: 0.9621\n","Epoch 145/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1631 - accuracy: 0.9394\n","Epoch 146/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.0813 - accuracy: 0.9848\n","Epoch 147/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1417 - accuracy: 0.9545\n","Epoch 148/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1107 - accuracy: 0.9621\n","Epoch 149/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.0860 - accuracy: 0.9848\n","Epoch 150/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.0880 - accuracy: 0.9773\n","Epoch 151/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1646 - accuracy: 0.9394\n","Epoch 152/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1206 - accuracy: 0.9697\n","Epoch 153/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.0934 - accuracy: 0.9697\n","Epoch 154/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1869 - accuracy: 0.9242\n","Epoch 155/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1510 - accuracy: 0.9394\n","Epoch 156/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1333 - accuracy: 0.9621\n","Epoch 157/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1264 - accuracy: 0.9545\n","Epoch 158/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1239 - accuracy: 0.9545\n","Epoch 159/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.0995 - accuracy: 0.9621\n","Epoch 160/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1666 - accuracy: 0.9242\n","Epoch 161/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1233 - accuracy: 0.9697\n","Epoch 162/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1062 - accuracy: 0.9773\n","Epoch 163/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.0672 - accuracy: 0.9848\n","Epoch 164/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1752 - accuracy: 0.9545\n","Epoch 165/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1738 - accuracy: 0.9394\n","Epoch 166/172\n","27/27 [==============================] - 0s 3ms/step - loss: 0.1122 - accuracy: 0.9470\n","Epoch 167/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1027 - accuracy: 0.9697\n","Epoch 168/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1034 - accuracy: 0.9697\n","Epoch 169/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1082 - accuracy: 0.9545\n","Epoch 170/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1373 - accuracy: 0.9545\n","Epoch 171/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.1377 - accuracy: 0.9773\n","Epoch 172/172\n","27/27 [==============================] - 0s 2ms/step - loss: 0.0832 - accuracy: 0.9697\n","model created\n"]}],"source":["import numpy as np\n","from keras.models import Sequential\n","from keras.layers import Dense, Activation, Dropout\n","# from keras.optimizers import SGD\n","from tensorflow.keras.optimizers import SGD\n","import random\n","\n","import nltk\n","from nltk.stem import WordNetLemmatizer\n","lemmatizer = WordNetLemmatizer()\n","import json\n","import pickle\n","\n","words=[]\n","classes = []\n","documents = []\n","ignore_letters = ['!', '?', ',', '.']\n","intents_file = open('/content/drive/MyDrive/Colab Notebooks/intents.json').read()\n","intents = json.loads(intents_file)\n","\n","for intent in intents['intents']:\n","    for pattern in intent['patterns']:\n","        #tokenize each word\n","        word = nltk.word_tokenize(pattern)\n","        words.extend(word)\n","        #add documents in the corpus\n","        documents.append((word, intent['tag']))\n","        # add to our classes list\n","        if intent['tag'] not in classes:\n","            classes.append(intent['tag'])\n","print(documents)\n","# lemmaztize and lower each word and remove duplicates\n","words = [lemmatizer.lemmatize(w.lower()) for w in words if w not in ignore_letters]\n","words = sorted(list(set(words)))\n","# sort classes\n","classes = sorted(list(set(classes)))\n","# documents = combination between patterns and intents\n","print (len(documents), \"documents\")\n","# classes = intents\n","print (len(classes), \"classes\", classes)\n","# words = all words, vocabulary\n","print (len(words), \"unique lemmatized words\", words)\n","\n","pickle.dump(words,open('words.pkl','wb'))\n","pickle.dump(classes,open('classes.pkl','wb'))\n","\n","# create our training data\n","training = []\n","# create an empty array for our output\n","output_empty = [0] * len(classes)\n","# training set, bag of words for each sentence\n","for doc in documents:\n","    # initialize our bag of words\n","    bag = []\n","    # list of tokenized words for the pattern\n","    pattern_words = doc[0]\n","    # lemmatize each word - create base word, in attempt to represent related words\n","    pattern_words = [lemmatizer.lemmatize(word.lower()) for word in pattern_words]\n","    # create our bag of words array with 1, if word match found in current pattern\n","    for word in words:\n","        bag.append(1) if word in pattern_words else bag.append(0)\n","        \n","    # output is a '0' for each tag and '1' for current tag (for each pattern)\n","    output_row = list(output_empty)\n","    output_row[classes.index(doc[1])] = 1\n","    \n","    training.append([bag, output_row])\n","# shuffle our features and turn into np.array\n","random.shuffle(training)\n","training = np.array(training)\n","# create train and test lists. X - patterns, Y - intents\n","train_x = list(training[:,0])\n","train_y = list(training[:,1])\n","print(\"Training data created\")\n","\n","# Create model - 3 layers. First layer 128 neurons, second layer 64 neurons and 3rd output layer contains number of neurons\n","# equal to number of intents to predict output intent with softmax\n","model = Sequential()\n","model.add(Dense(128, input_shape=(len(train_x[0]),), activation='relu'))\n","model.add(Dropout(0.5))\n","model.add(Dense(64, activation='relu'))\n","model.add(Dropout(0.5))\n","model.add(Dense(len(train_y[0]), activation='softmax'))\n","\n","# Compile model. Stochastic gradient descent with Nesterov accelerated gradient gives good results for this model\n","sgd = SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)\n","model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])\n","\n","#fitting and saving the model \n","hist = model.fit(np.array(train_x), np.array(train_y), epochs=172, batch_size=5, verbose=1)\n","model.save('chatbot_model.h5', hist)\n","\n","print(\"model created\")"]},{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":940},"executionInfo":{"elapsed":13342,"status":"ok","timestamp":1640456765514,"user":{"displayName":"Alex Chatbot","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16417906010517197924"},"user_tz":-330},"id":"_eClH25jEfc4","outputId":"3a83dfe8-75c5-4570-f20c-18e2127a8a3b"},"outputs":[{"name":"stdout","output_type":"stream","text":["Collecting ibm_watson\n","  Downloading ibm-watson-5.3.0.tar.gz (412 kB)\n","\u001b[?25l\r\u001b[K     |▉                               | 10 kB 25.0 MB/s eta 0:00:01\r\u001b[K     |█▋                              | 20 kB 13.2 MB/s eta 0:00:01\r\u001b[K     |██▍                             | 30 kB 10.2 MB/s eta 0:00:01\r\u001b[K     |███▏                            | 40 kB 8.9 MB/s eta 0:00:01\r\u001b[K     |████                            | 51 kB 5.5 MB/s eta 0:00:01\r\u001b[K     |████▊                           | 61 kB 5.5 MB/s eta 0:00:01\r\u001b[K     |█████▋                          | 71 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |██████▍                         | 81 kB 5.9 MB/s eta 0:00:01\r\u001b[K     |███████▏                        | 92 kB 6.0 MB/s eta 0:00:01\r\u001b[K     |████████                        | 102 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |████████▊                       | 112 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |█████████▌                      | 122 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |██████████▎                     | 133 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |███████████▏                    | 143 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |████████████                    | 153 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |████████████▊                   | 163 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |█████████████▌                  | 174 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |██████████████▎                 | 184 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |███████████████                 | 194 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |████████████████                | 204 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |████████████████▊               | 215 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |█████████████████▌              | 225 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |██████████████████▎             | 235 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |███████████████████             | 245 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |███████████████████▉            | 256 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |████████████████████▋           | 266 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |█████████████████████▌          | 276 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |██████████████████████▎         | 286 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |███████████████████████         | 296 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |███████████████████████▉        | 307 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |████████████████████████▋       | 317 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▍      | 327 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▏     | 337 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████     | 348 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▉    | 358 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▋   | 368 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▍  | 378 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▏ | 389 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████ | 399 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▉| 409 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 412 kB 5.1 MB/s \n","\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n","  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n","    Preparing wheel metadata ... \u001b[?25l\u001b[?25hdone\n","Collecting websocket-client==1.1.0\n","  Downloading websocket_client-1.1.0-py2.py3-none-any.whl (68 kB)\n","\u001b[K     |████████████████████████████████| 68 kB 5.5 MB/s \n","\u001b[?25hRequirement already satisfied: python-dateutil\u003e=2.5.3 in /usr/local/lib/python3.7/dist-packages (from ibm_watson) (2.8.2)\n","Collecting ibm-cloud-sdk-core==3.*,\u003e=3.3.6\n","  Downloading ibm-cloud-sdk-core-3.13.2.tar.gz (49 kB)\n","\u001b[K     |████████████████████████████████| 49 kB 6.0 MB/s \n","\u001b[?25hRequirement already satisfied: requests\u003c3.0,\u003e=2.0 in /usr/local/lib/python3.7/dist-packages (from ibm_watson) (2.23.0)\n","Collecting requests\u003c3.0,\u003e=2.0\n","  Downloading requests-2.26.0-py2.py3-none-any.whl (62 kB)\n","\u001b[K     |████████████████████████████████| 62 kB 773 kB/s \n","\u001b[?25hCollecting urllib3\u003c2.0.0,\u003e=1.26.0\n","  Downloading urllib3-1.26.7-py2.py3-none-any.whl (138 kB)\n","\u001b[K     |████████████████████████████████| 138 kB 62.7 MB/s \n","\u001b[?25hCollecting PyJWT\u003c3.0.0,\u003e=2.0.1\n","  Downloading PyJWT-2.3.0-py3-none-any.whl (16 kB)\n","Requirement already satisfied: six\u003e=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil\u003e=2.5.3-\u003eibm_watson) (1.15.0)\n","Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.7/dist-packages (from requests\u003c3.0,\u003e=2.0-\u003eibm_watson) (2.0.8)\n","Requirement already satisfied: certifi\u003e=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests\u003c3.0,\u003e=2.0-\u003eibm_watson) (2021.10.8)\n","Requirement already satisfied: idna\u003c4,\u003e=2.5 in /usr/local/lib/python3.7/dist-packages (from requests\u003c3.0,\u003e=2.0-\u003eibm_watson) (2.10)\n","Building wheels for collected packages: ibm-watson, ibm-cloud-sdk-core\n","  Building wheel for ibm-watson (PEP 517) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for ibm-watson: filename=ibm_watson-5.3.0-py3-none-any.whl size=408872 sha256=81a7ce92fed97ffbe2f865d694e733ef0171c1f2536f3ee9a2bed12d862156bd\n","  Stored in directory: /root/.cache/pip/wheels/21/d9/82/4ce5b94730bc4f1f7b4c6384f72964b9b8f79fcc125bb8085c\n","  Building wheel for ibm-cloud-sdk-core (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for ibm-cloud-sdk-core: filename=ibm_cloud_sdk_core-3.13.2-py3-none-any.whl size=83241 sha256=0a022a4b2972f4aaee446a28d416b8f9010c9143d01a5d50022329fc5c61c128\n","  Stored in directory: /root/.cache/pip/wheels/f0/0d/5c/0c26fcc2db712e8d270e52f7c9f6d8abe33ca79ec29438aa14\n","Successfully built ibm-watson ibm-cloud-sdk-core\n","Installing collected packages: urllib3, requests, PyJWT, websocket-client, ibm-cloud-sdk-core, ibm-watson\n","  Attempting uninstall: urllib3\n","    Found existing installation: urllib3 1.24.3\n","    Uninstalling urllib3-1.24.3:\n","      Successfully uninstalled urllib3-1.24.3\n","  Attempting uninstall: requests\n","    Found existing installation: requests 2.23.0\n","    Uninstalling requests-2.23.0:\n","      Successfully uninstalled requests-2.23.0\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","google-colab 1.0.0 requires requests~=2.23.0, but you have requests 2.26.0 which is incompatible.\n","datascience 0.10.6 requires folium==0.2.1, but you have folium 0.8.3 which is incompatible.\u001b[0m\n","Successfully installed PyJWT-2.3.0 ibm-cloud-sdk-core-3.13.2 ibm-watson-5.3.0 requests-2.26.0 urllib3-1.26.7 websocket-client-1.1.0\n"]},{"data":{"application/vnd.colab-display-data+json":{"pip_warning":{"packages":["requests","urllib3"]}}},"metadata":{},"output_type":"display_data"}],"source":["!pip install ibm_watson"]},{"cell_type":"code","execution_count":14,"metadata":{"executionInfo":{"elapsed":27,"status":"ok","timestamp":1640456765516,"user":{"displayName":"Alex Chatbot","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16417906010517197924"},"user_tz":-330},"id":"OWBZbYdIEnVH"},"outputs":[],"source":["import anvil.server"]},{"cell_type":"code","execution_count":15,"metadata":{"executionInfo":{"elapsed":27,"status":"ok","timestamp":1640456765517,"user":{"displayName":"Alex Chatbot","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16417906010517197924"},"user_tz":-330},"id":"283kbj3jFIu6"},"outputs":[],"source":["anvil.server.connect(\"UISBPRXO45JXOW37TAV7S3BI-QTHQNQQN57DALOUQ\")"]},{"cell_type":"code","execution_count":16,"metadata":{"executionInfo":{"elapsed":708,"status":"ok","timestamp":1640456766199,"user":{"displayName":"Alex Chatbot","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16417906010517197924"},"user_tz":-330},"id":"INk-3PU0rqA0"},"outputs":[],"source":["import json\n","from ibm_watson import ToneAnalyzerV3\n","from ibm_cloud_sdk_core.authenticators import IAMAuthenticator"]},{"cell_type":"code","execution_count":17,"metadata":{"executionInfo":{"elapsed":39,"status":"ok","timestamp":1640456766200,"user":{"displayName":"Alex Chatbot","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16417906010517197924"},"user_tz":-330},"id":"yLZKraGLpUoq"},"outputs":[],"source":["msg = list()\n","text = str()"]},{"cell_type":"code","execution_count":18,"metadata":{"executionInfo":{"elapsed":39,"status":"ok","timestamp":1640456766201,"user":{"displayName":"Alex Chatbot","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16417906010517197924"},"user_tz":-330},"id":"jY-qqSlY8ifi"},"outputs":[],"source":["@anvil.server.callable\n","def responsed(msg1):\n","    msg.append(msg1)\n","    ints = predict_class(msg1)\n","    res = getResponse(ints, intents)\n","    return res"]},{"cell_type":"code","execution_count":19,"metadata":{"executionInfo":{"elapsed":40,"status":"ok","timestamp":1640456766202,"user":{"displayName":"Alex Chatbot","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16417906010517197924"},"user_tz":-330},"id":"StHSsHWQk20Q"},"outputs":[],"source":["@anvil.server.callable\n","def song_emotion():\n","    authenticator = IAMAuthenticator(\"MD5GVWMyn6ZtKbfrsi4-akEQoli-Ik8dctkkPxO2sF2Y\")\n","    tone_analyzer = ToneAnalyzerV3(\n","        version='2017-09-21',\n","        authenticator=authenticator\n","    \n","    )\n","\n","    tone_analyzer.set_service_url( \"https://api.au-syd.tone-analyzer.watson.cloud.ibm.com/instances/51ea3a2c-85d3-4a18-8855-c47fd2c90479\")\n","    # text = \"\"\n","    # for i in msg:\n","    #     text = text+i\n","    len1 = len(msg)\n","    tone_analysis = tone_analyzer.tone(\n","        {'text': msg[len1-1]+\" \"+msg[len1-2]+\" \"+msg[len1-3]+\" \"+msg[len1-4]+\" \"+msg[len1-5]},\n","        content_type='application/json'\n","    ).get_result()\n","    dic1 = dict()\n","    emotion=tone_analysis[\"document_tone\"][\"tones\"][0][\"tone_name\"]\n","    dic1['emotion'] = emotion\n","    import requests\n","\n","    url=f\"http://ws.audioscrobbler.com/2.0/?method=tag.gettoptracks\u0026tag={emotion}\u0026api_key=670ed82a5251608fc1d95b1e15ae7c10\u0026format=json\u0026limit=10\"\n","    response = requests.get(url)\n","    payload = response.json()\n","    for i in range(10):\n","        r=payload['tracks']['track'][i]\n","        dic1[r['name']] = r['url']\n","    return dic1"]},{"cell_type":"code","execution_count":20,"metadata":{"executionInfo":{"elapsed":39,"status":"ok","timestamp":1640456766202,"user":{"displayName":"Alex Chatbot","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16417906010517197924"},"user_tz":-330},"id":"q18XH1RWpAXV"},"outputs":[],"source":["# SONG RECOMMENDATION"]},{"cell_type":"code","execution_count":21,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":40,"status":"ok","timestamp":1640456766203,"user":{"displayName":"Alex Chatbot","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16417906010517197924"},"user_tz":-330},"id":"8N4bfBmXnBkm","outputId":"edb9858c-203b-4b1b-ef54-c00e25b5e7c4"},"outputs":[{"name":"stdout","output_type":"stream","text":["{'tracks': {'track': [{'name': 'Pumped Up Kicks', 'duration': '236', 'mbid': '816b3284-5f24-4f3a-9554-750e0bf5d060', 'url': 'https://www.last.fm/music/Foster+the+People/_/Pumped+Up+Kicks', 'streamable': {'#text': '0', 'fulltrack': '0'}, 'artist': {'name': 'Foster the People', 'mbid': 'e0e1a584-dd0a-4bd1-88d1-c4c62895039d', 'url': 'https://www.last.fm/music/Foster+the+People'}, 'image': [{'#text': 'https://lastfm.freetls.fastly.net/i/u/34s/2a96cbd8b46e442fc41c2b86b821562f.png', 'size': 'small'}, {'#text': 'https://lastfm.freetls.fastly.net/i/u/64s/2a96cbd8b46e442fc41c2b86b821562f.png', 'size': 'medium'}, {'#text': 'https://lastfm.freetls.fastly.net/i/u/174s/2a96cbd8b46e442fc41c2b86b821562f.png', 'size': 'large'}, {'#text': 'https://lastfm.freetls.fastly.net/i/u/300x300/2a96cbd8b46e442fc41c2b86b821562f.png', 'size': 'extralarge'}], '@attr': {'rank': '1'}}, {'name': \"I'm Yours\", 'duration': '242', 'mbid': 'a5a2330e-2fff-4601-a715-6e68a8e98fbf', 'url': 'https://www.last.fm/music/Jason+Mraz/_/I%27m+Yours', 'streamable': {'#text': '0', 'fulltrack': '0'}, 'artist': {'name': 'Jason Mraz', 'mbid': '82eb8936-7bf6-4577-8320-a2639465206d', 'url': 'https://www.last.fm/music/Jason+Mraz'}, 'image': [{'#text': 'https://lastfm.freetls.fastly.net/i/u/34s/2a96cbd8b46e442fc41c2b86b821562f.png', 'size': 'small'}, {'#text': 'https://lastfm.freetls.fastly.net/i/u/64s/2a96cbd8b46e442fc41c2b86b821562f.png', 'size': 'medium'}, {'#text': 'https://lastfm.freetls.fastly.net/i/u/174s/2a96cbd8b46e442fc41c2b86b821562f.png', 'size': 'large'}, {'#text': 'https://lastfm.freetls.fastly.net/i/u/300x300/2a96cbd8b46e442fc41c2b86b821562f.png', 'size': 'extralarge'}], '@attr': {'rank': '2'}}, {'name': 'Dog Days Are Over', 'duration': '270', 'mbid': '772ea437-45b3-4868-b3c0-b80526ef0fa3', 'url': 'https://www.last.fm/music/Florence+%252B+the+Machine/_/Dog+Days+Are+Over', 'streamable': {'#text': '0', 'fulltrack': '0'}, 'artist': {'name': 'Florence + the Machine', 'mbid': '5fee3020-513b-48c2-b1f7-4681b01db0c6', 'url': 'https://www.last.fm/music/Florence+%252B+the+Machine'}, 'image': [{'#text': 'https://lastfm.freetls.fastly.net/i/u/34s/2a96cbd8b46e442fc41c2b86b821562f.png', 'size': 'small'}, {'#text': 'https://lastfm.freetls.fastly.net/i/u/64s/2a96cbd8b46e442fc41c2b86b821562f.png', 'size': 'medium'}, {'#text': 'https://lastfm.freetls.fastly.net/i/u/174s/2a96cbd8b46e442fc41c2b86b821562f.png', 'size': 'large'}, {'#text': 'https://lastfm.freetls.fastly.net/i/u/300x300/2a96cbd8b46e442fc41c2b86b821562f.png', 'size': 'extralarge'}], '@attr': {'rank': '3'}}, {'name': 'A-Punk', 'duration': '136', 'mbid': '047db898-cedf-48a0-afc2-5b686c9b8840', 'url': 'https://www.last.fm/music/Vampire+Weekend/_/A-Punk', 'streamable': {'#text': '0', 'fulltrack': '0'}, 'artist': {'name': 'Vampire Weekend', 'mbid': 'af37c51c-0790-4a29-b995-456f98a6b8c9', 'url': 'https://www.last.fm/music/Vampire+Weekend'}, 'image': [{'#text': 'https://lastfm.freetls.fastly.net/i/u/34s/2a96cbd8b46e442fc41c2b86b821562f.png', 'size': 'small'}, {'#text': 'https://lastfm.freetls.fastly.net/i/u/64s/2a96cbd8b46e442fc41c2b86b821562f.png', 'size': 'medium'}, {'#text': 'https://lastfm.freetls.fastly.net/i/u/174s/2a96cbd8b46e442fc41c2b86b821562f.png', 'size': 'large'}, {'#text': 'https://lastfm.freetls.fastly.net/i/u/300x300/2a96cbd8b46e442fc41c2b86b821562f.png', 'size': 'extralarge'}], '@attr': {'rank': '4'}}, {'name': \"Friday I'm in Love\", 'duration': '214', 'mbid': '8d9104c6-7d8e-460b-8c3d-2d797f79953d', 'url': 'https://www.last.fm/music/The+Cure/_/Friday+I%27m+in+Love', 'streamable': {'#text': '0', 'fulltrack': '0'}, 'artist': {'name': 'The Cure', 'mbid': '69ee3720-a7cb-4402-b48d-a02c366f2bcf', 'url': 'https://www.last.fm/music/The+Cure'}, 'image': [{'#text': 'https://lastfm.freetls.fastly.net/i/u/34s/2a96cbd8b46e442fc41c2b86b821562f.png', 'size': 'small'}, {'#text': 'https://lastfm.freetls.fastly.net/i/u/64s/2a96cbd8b46e442fc41c2b86b821562f.png', 'size': 'medium'}, {'#text': 'https://lastfm.freetls.fastly.net/i/u/174s/2a96cbd8b46e442fc41c2b86b821562f.png', 'size': 'large'}, {'#text': 'https://lastfm.freetls.fastly.net/i/u/300x300/2a96cbd8b46e442fc41c2b86b821562f.png', 'size': 'extralarge'}], '@attr': {'rank': '5'}}], '@attr': {'tag': 'happy', 'page': '1', 'perPage': '5', 'totalPages': '4506', 'total': '22530'}}}\n"]}],"source":["import requests\n","\n","url=f\"http://ws.audioscrobbler.com/2.0/?method=tag.gettoptracks\u0026tag=happy\u0026api_key=670ed82a5251608fc1d95b1e15ae7c10\u0026format=json\u0026limit=5\"\n","response = requests.get(url)\n","payload = response.json()\n","# for i in range(4):\n","r=payload['tracks']['track'][0]\n","# print(r['url'])\n","print(payload)"]},{"cell_type":"code","execution_count":22,"metadata":{"executionInfo":{"elapsed":34,"status":"ok","timestamp":1640456766203,"user":{"displayName":"Alex Chatbot","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16417906010517197924"},"user_tz":-330},"id":"Zio9sPymm7kF"},"outputs":[],"source":["# print(dic1)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"ZCECIQiBEDpr"},"outputs":[{"name":"stdout","output_type":"stream","text":["Chatbot : Hey there, Wassup ?\n"]}],"source":["print(\"Chatbot : Hey there, Wassup ?\")\n","# responded function takes text of user and returns chatbot output\n","for i in range(7):\n","    m = input(\"User : \")\n","    res = responsed(m)\n","    print(\"Chatbot : \"+res)\n","ans = song_emotion()\n","print(\"Emotion : \"+ans['emotion'])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"O4yla2WTHiGz"},"outputs":[],"source":["# song_emotion function would return dictionary consisting of emotion and recommended songs\n","ans = song_emotion()\n","print(\"Emotion : \"+ans['emotion'])\n","ans.pop('emotion')\n","lst = list(ans.keys())\n","print(\"Song Recommendations : \")\n","for i in range(10):\n","    print(\"Song_name : \"+lst[i])\n","    print(\"Song_URL : \"+ans[lst[i]])\n"]}],"metadata":{"colab":{"collapsed_sections":[],"name":"JamBot","provenance":[{"file_id":"https://github.com/Srishti20022/Music-me-Chatbot_song_recommendor_system-/blob/main/chatbot_song_recommender_system.ipynb","timestamp":1635484856508}],"version":""},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}